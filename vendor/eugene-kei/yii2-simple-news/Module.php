<?phpnamespace eugenekei\news;use Yii;use yii\base\Exception;use yii\base\InvalidConfigException;use yii\helpers\FileHelper;class Module extends \yii\base\Module{    /**     * @var string     */    public $controllerNamespace = 'eugenekei\news\controllers\frontend';    /**     * @var string     */    public $authorNameField = 'email';    /**     * @var string     */    public $authorModel = 'user';    /**     * @var string     */    public $authorClass = 'common\models\User';    /**     * @var string     */    public $imageUploadPath = '@frontend/web/images/news';    /**     * @var string     */    public $imageGetUrl = '/images/news/';    /**     * @var string     */    public $uploadTempPath = '';    /**     * @var string     */    public $imageGetTempUrl = '';    public function init()    {        if (empty($this->imageUploadPath)) {            throw new InvalidConfigException('The "imageUploadPath" property must be set.');        }        if (empty($this->imageGetUrl)) {            throw new InvalidConfigException('The "imageGetUrl" property must be set.');        }        $this->imageGetTempUrl = $this->imageGetUrl . 'tmp/';        $this->uploadTempPath = Yii::getAlias($this->imageUploadPath) . DIRECTORY_SEPARATOR . 'tmp' . DIRECTORY_SEPARATOR;        if (!is_dir($this->uploadTempPath)) {            if (!mkdir($this->uploadTempPath, 0777, true)) {                throw new Exception("can't create directory " . $this->uploadTempPath);            }        }        parent::init();        return $this->removeOldTempFiles();    }    /**     * Font-Awesome icon css class     * @return string     */    public static function getIcon()    {        return 'fa-newspaper-o';    }    /**     * @return bool     */    private function removeOldTempFiles()    {        $imageUploadPath = $this->uploadTempPath;        if (!empty($imageUploadPath) && is_dir($imageUploadPath)) {            $scandir = scandir($imageUploadPath);            $dayAgo = time() - 60*60*24;            foreach ($scandir as $dirName) {                if ($dirName == '.' || $dirName == '..') {                    continue;                }                if (filemtime($imageUploadPath . $dirName) < $dayAgo) {                    if(is_dir($imageUploadPath . $dirName)){                        FileHelper::removeDirectory($imageUploadPath . $dirName);                    }else{                        unlink($imageUploadPath . $dirName);                    }                }            }        }        return true;    }    /**     * Translates a message to the specified language.     *     * This is a shortcut method of [[\yii\i18n\I18N::translate()]].     *     * The translation will be conducted according to the message category and the target language will be used.     *     * You can add parameters to a translation message that will be substituted with the corresponding value after     * translation. The format for this is to use curly brackets around the parameter name as you can see in the following example:     *     * ```php     * $username = 'Alexander';     * echo \Yii::t('app', 'Hello, {username}!', ['username' => $username]);     * ```     *     * Further formatting of message parameters is supported using the [PHP intl extensions](http://www.php.net/manual/en/intro.intl.php)     * message formatter. See [[\yii\i18n\I18N::translate()]] for more details.     *     * @param string $category the message category.     * @param string $message the message to be translated.     * @param array $params the parameters that will be used to replace the corresponding placeholders in the message.     * @param string $language the language code (e.g. `en-US`, `en`). If this is null, the current     * [[\yii\base\Application::language|application language]] will be used.     * @return string the translated message.     */    public static function t($category, $message, $params = [], $language = null)    {        $path = str_replace('\\', '/', __NAMESPACE__);        // Add module I18N category.        if (!isset(Yii::$app->i18n->translations[$category])) {            Yii::$app->i18n->translations[$category] = [                'class' => 'yii\i18n\PhpMessageSource',                'basePath' => '@' . $path . '/messages',                'fileMap' => [                    $path => $category . '.php',                ]            ];        }        return Yii::t($category, $message, $params, $language);    }}